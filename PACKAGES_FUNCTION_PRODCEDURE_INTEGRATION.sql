/*CREATING A PROCEDURE FOR ADDITION*/
CREATE OR REPLACE PROCEDURE STORE_PROC_EMP
(
    X IN NUMBER,
    Y IN NUMBER
)
AS
    Z NUMBER ;

BEGIN

    Z:=X+Y;
    DBMS_OUTPUT.PUT_LINE(Z);

END;

BEGIN

STORE_PROC_EMP(X=>10,Y=>20);

END

/*USING ONE PROCEDURE INSIDE ANOTHER PROCEDURE */

CREATE OR REPLACE PROCEDURE STORE_PROC_DEPT_EMP
(
    D IN NUMBER,
    E IN NUMBER,
    F IN NUMBER,
    G IN NUMBER 
)
AS 
    B NUMBER ;

BEGIN

    B:=D-E;
    DBMS_OUTPUT.PUT_LINE(B);
    STORE_PROC_EMP(X=>F,Y=>G);

END;

BEGIN

STORE_PROC_DEPT_EMP(D=>20,E=>10,F=>40,G=>50);

END



/* CREATING THE FUNCTION FIR MULTIPLICATION*/

CREATE OR REPLACE FUNCTION STORE_FUNC_EMP_NEW
(
    P IN NUMBER,
    Q IN NUMBER
) RETURN NUMBER
AS 
    R NUMBER;
BEGIN
    R:=P*Q;
    RETURN R;
END;

DECLARE 
RESULT_VAR NUMBER;
BEGIN
RESULT_VAR:=STORE_FUNC_EMP_NEW(P=>10,Q=>20);
DBMS_OUTPUT.PUT_LINE(RESULT_VAR);
END;

/*CREATING THE FUNCTION USING THE IS COMMAND INSTEAD OF AS COMMAND */

CREATE OR REPLACE FUNCTION  STORE_FUNC_EMP_NEW_FRESH 
(
    Q IN NUMBER,
    W IN NUMBER
)RETURN NUMBER
IS 
    S NUMBER;
BEGIN

    S:=Q/W;
    DBMS_OUTPUT.PUT_LINE('PROCESS COMPLETED SUCCESSFULLY');
    RETURN S;

EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SOMETHING WENT WRONG');
    

END;

/*CALLING THE LATEST FUNCTION AS */

DECLARE 
RESULT_VAR NUMBER ;
BEGIN
RESULT_VAR:=STORE_FUNC_EMP_NEW_FRESH(Q=>10,W=>2);
DBMS_OUTPUT.PUT_LINE(RESULT_VAR);
END;




/*CREATING THE PACKAGE USING THE BOTH THINGS*/

/*USE CASE 1 BY USING THE SIMPLE  STORED PROCEDURE */

/*DECLARING THE PACKAGE FOR THE FIRST PROCEDURE */

/*CREATING THE PACKAGE HEADER */

CREATE OR REPLACE PACKAGE STORE_PKG IS
PROCEDURE STORE_PROC_EMP(X IN NUMBER,Y IN NUMBER);
END STORE_PKG

/*CREATING THE PACKAGE BODY */

CREATE OR REPLACE PACKAGE BODY STORE_PKG IS 
PROCEDURE STORE_PROC_EMP(
    X IN NUMBER,
    Y IN NUMBER
)
IS
    Z NUMBER ;
BEGIN
    Z:=X+Y;
    DBMS_OUTPUT.PUT_LINE(Z);

END STORE_PROC_EMP;
END STORE_PKG; 

/*CALLING THE PACKAGE AS */

BEGIN

STORE_PKG.STORE_PROC_EMP(X=>10,Y=>20);

END 


EXECUTE STORE_PKG.STORE_PROC_EMP(X=>10,Y=>20);


-- SELECT STORE_PKG.STORE_PROC_EMP(x=>10,Y=>20) FROM DUAL;

/*DECLARING THE PACKAGE FOR THE NESTED PROCEDURE */

CREATE OR REPLACE PACKAGE STORE_NEW_PKG IS
PROCEDURE STORE_PROC_DEPT_EMP (
    D IN NUMBER,
    E IN NUMBER,
    F IN NUMBER,
    G IN NUMBER
);
END STORE_NEW_PKG;

CREATE OR REPLACE PACKAGE BODY STORE_NEW_PKG IS
PROCEDURE STORE_PROC_DEPT_EMP (
    D IN NUMBER,
    E IN NUMBER,
    F IN NUMBER,
    G IN NUMBER
)
IS
    B  NUMBER ;

BEGIN
    B:=(D-E);
    DBMS_OUTPUT.PUT_LINE(B);
    STORE_PROC_EMP(X=>F,Y=>G);

EXCEPTION
    WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('SOMETHING WENT WRONG');

END STORE_PROC_DEPT_EMP ;

END STORE_NEW_PKG;

-- SELECT STORE_NEW_PKG.STORE_PROC_DEPT_EMP(D=>20,E=>10,F=>100,G=>200) FROM DUAL ;

BEGIN

STORE_NEW_PKG.STORE_PROC_DEPT_EMP(D=>20,E=>10,F=>100,G=>200);

END


/*DELCATING THE PACKAGE USING THE FUNCTION*/

CREATE OR REPLACE PACKAGE STORE_FUNC_PKG IS 
FUNCTION STORE_FUNC_EMP_NEW(
    P IN NUMBER,
    Q IN NUMBER
) RETURN NUMBER;
END STORE_FUNC_PKG;

/* CREATING THE PACKAGE BODY AS  */

CREATE OR REPLACE PACKAGE BODY STORE_FUNC_PKG IS 
FUNCTION STORE_FUNC_EMP_NEW(
    P IN NUMBER,
    Q IN NUMBER
) RETURN NUMBER
IS 
    R NUMBER;
BEGIN
    R:=P*Q;
    DBMS_OUTPUT.PUT_LINE('FUNCTION EXECUTION SUCCESSFUL');
    RETURN R;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('SOMETHING WENT WRONG');

END STORE_FUNC_EMP_NEW ;
END STORE_FUNC_PKG;


DECLARE
RESULT_VAR NUMBER; 
BEGIN
RESULT_VAR:=STORE_FUNC_PKG.STORE_FUNC_EMP_NEW(P=>10,Q=>20);
DBMS_OUTPUT.PUT_LINE(RESULT_VAR);
END

SELECT STORE_FUNC_PKG.STORE_FUNC_EMP_NEW(P=>10,Q=>20) FROM DUAL;


