
/*PERMS FOR USER USAGE*/
/*---------------------------------------------------*/
--CREATE USER ABISMRUTA  IDENTIFIED BY  lIVERPOOL2022
--ACCOUNT UNLOCK;
--
--GRANT CREATE SESSION TO PRATEEK
--
--GRANT SELECT ON CUSTOMER TO PRATEEK
--
--
--SELECT * FROM ALL_USERS;
--
--SELECT SYS.DATE FROM DUAL;
--
--SHOW USER;

/*DEFIING THE PRAGMA AUTONOMOUS_TRANCTION  FOR PLSQL */

/*-----------------------------------------------------------------------------------------------------------*/

CREATE TABLE EMP_PRAGMA ( 
    EMPNO NUMBER, 
    SALARY VARCHAR2(20)
    ) ;

/* ALTERING THE SALARY TO THE NUMBER FORMAT FROM VARCHAR2 FORMAT */    

ALTER TABLE EMP_PRAGMA MODIFY SALARY NUMBER ;

/* NOW WE CAN SEE THE DESCRIOTION AS */

DESCRIBE EMP_PRAGMA;

    
/* INSERTING INTO THE TABLE BY INSERT ALL COMMAND IN THE BEGIN BLOCK */

BEGIN
    INSERT ALL
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1001,1800)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1002,1600)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1003,2800)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1004,2300)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1005,1400)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1006,1200)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1007,3900)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1008,4800)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1009,3800)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1010,2100)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1011,3200)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1012,5300)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1013,3500)
    INTO EMP_PRAGMA(EMPNO,SALARY) VALUES (1014,2700)
    SELECT * FROM DUAL;
END;

/* NOW WE CAN CHECK THE THE COUNT AS */

SELECT COUNT(*) FROM EMP_PRAGMA;

/*NOW CREATING A FUNCTION AND ROLLONG IT BACK  WITH OUT PLSQL PRAGMA AUTONOMOUS_TRANACTION */

CREATE OR REPLACE PROCEDURE EMP_PRAG_PROC 
(
    EMP_NO IN NUMBER 
)
IS
BEGIN
    UPDATE EMP_PRAGMA SET SALARY=SALARY+1000 WHERE EMPNO=EMP_NO;
    DBMS_OUTPUT.PUT_LINE('ROLLING ALL THE APPLICATION BACK ');
    ROLLBACK ;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(2000,'SOMETHING WENT WRONG ');

END EMP_PRAG_PROC ;

/* NOW WE ARE EXECUTING THE FUNCTION AS ANOTHER BLOCK INSIDE A PROGRAM WHERE A NEW TRANACTION WILL BE STARTED */

BEGIN 

UPDATE EMP_PRAGMA SET SALARY=SALARY+1000 WHERE EMPNO=1005;

--NOW HERE WE ARE CALLING THE  PROCEDURE 

EMP_PRAG_PROC(EMP_NO=>1006);

--NOW HERE ARE COMMITING THE CHANGES 

COMMIT ;

END;

/* CHECKING THE INFO WHICH SHOULD NOT BE UPDATED AS PER MY  EXPECTATION */

SELECT * FROM EMP_PRAGMA;

/*NOW USING THE PLSQL PRAGMA AUTONOMOUS_TRANACTION */

CREATE OR REPLACE PROCEDURE EMP_PRAG_PROC 
(
    EMP_NO IN NUMBER 
)
IS
    PRAGMA AUTONOMOUS_TRANSACTION  ; /* USING THE PRAGMA */
BEGIN
    UPDATE EMP_PRAGMA SET SALARY=SALARY+1000 WHERE EMPNO=EMP_NO;
    DBMS_OUTPUT.PUT_LINE('ROLLING ALL THE APPLICATION BACK ');
    ROLLBACK ;
EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(2000,'SOMETHING WENT WRONG ');

END EMP_PRAG_PROC ;

/* NOW CALLING THE SAME FUNCTION INSODE ANOTHER PROGRAM
HERE MY EXPECTION IS THE UPDATE IN THIS PROGRAM  WILL EXECUTE BUT NOT  THE PROCEDURE ONE*/

BEGIN

UPDATE EMP_PRAGMA SET SALARY=SALARY+1000 WHERE EMPNO=1005;

EMP_PRAG_PROC(EMP_NO=>1006);

END;

/* NOW CHECKING FOR THE SAME THING AS */

SELECT * FROM EMP_PRAGMA;














